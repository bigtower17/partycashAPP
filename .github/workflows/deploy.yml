name: Deploy to EC2

on:
  push:
    branches:
      - main
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set deployment variables
        id: vars
        run: |
          branch="${GITHUB_REF##*/}"
          
          if [ "$branch" = "main" ]; then
            echo "branch=main" >> $GITHUB_OUTPUT
            echo "env_name=production" >> $GITHUB_OUTPUT
            echo "compose_file=docker-compose.production.yml" >> $GITHUB_OUTPUT
            
            # Sanitize production secrets
            host=$(printf '%s' "${{ secrets.EC2_HOST_PROD }}" | tr -d '\n')
            user=$(printf '%s' "${{ secrets.EC2_USER_PROD }}" | tr -d '\n')
            ssh_key=$(printf '%s' "${{ secrets.SSH_PRIVATE_KEY_PROD }}" | tr -d '\n')
            
            echo "host=$host" >> $GITHUB_OUTPUT
            echo "user=$user" >> $GITHUB_OUTPUT
            echo "ssh_key=$ssh_key" >> $GITHUB_OUTPUT
          else
            echo "branch=staging" >> $GITHUB_OUTPUT
            echo "env_name=staging" >> $GITHUB_OUTPUT
            echo "compose_file=docker-compose.staging.yml" >> $GITHUB_OUTPUT
            
            # Sanitize staging secrets
            host=$(printf '%s' "${{ secrets.EC2_HOST }}" | tr -d '\n')
            user=$(printf '%s' "${{ secrets.EC2_USER }}" | tr -d '\n')
            ssh_key=$(printf '%s' "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\n')
            
            echo "host=$host" >> $GITHUB_OUTPUT
            echo "user=$user" >> $GITHUB_OUTPUT
            echo "ssh_key=$ssh_key" >> $GITHUB_OUTPUT
          fi
      

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.vars.outputs.host }}
          username: ${{ steps.vars.outputs.user }}
          key: ${{ steps.vars.outputs.ssh_key }}
          script: |
            cd /home/ubuntu/partycashAPP
            git pull origin ${{ steps.vars.outputs.branch }}

            docker compose -f docker-compose.yml -f ${{ steps.vars.outputs.compose_file }} down
            docker compose -f docker-compose.yml -f ${{ steps.vars.outputs.compose_file }} build --no-cache
            docker compose -f docker-compose.yml -f ${{ steps.vars.outputs.compose_file }} up -d
