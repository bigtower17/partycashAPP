name: Deploy to EC2

on:
  push:
    branches:
      - main
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set deployment variables
        id: vars
        env:
          SSH_PRIVATE_KEY_PROD: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST_PROD: ${{ secrets.EC2_HOST_PROD }}
          EC2_USER_PROD: ${{ secrets.EC2_USER_PROD }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          branch="${GITHUB_REF##*/}"
          if [ "$branch" = "main" ]; then
            echo "branch=main" >> $GITHUB_OUTPUT
            echo "env_name=production" >> $GITHUB_OUTPUT
            echo "compose_file=docker-compose.production.yml" >> $GITHUB_OUTPUT
            # Remove newlines from the production SSH key
            ssh_key=$(echo "$SSH_PRIVATE_KEY_PROD" | tr -d '\n')
            echo "host=$EC2_HOST_PROD" >> $GITHUB_OUTPUT
            echo "user=$EC2_USER_PROD" >> $GITHUB_OUTPUT
            echo "ssh_key=$ssh_key" >> $GITHUB_OUTPUT
          else
            echo "branch=staging" >> $GITHUB_OUTPUT
            echo "env_name=staging" >> $GITHUB_OUTPUT
            echo "compose_file=docker-compose.staging.yml" >> $GITHUB_OUTPUT
            # Remove newlines from the staging SSH key
            ssh_key=$(echo "$SSH_PRIVATE_KEY" | tr -d '\n')
            echo "host=$EC2_HOST" >> $GITHUB_OUTPUT
            echo "user=$EC2_USER" >> $GITHUB_OUTPUT
            echo "ssh_key=$ssh_key" >> $GITHUB_OUTPUT
          fi

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.vars.outputs.host }}
          username: ${{ steps.vars.outputs.user }}
          key: ${{ steps.vars.outputs.ssh_key }}
          script: |
            cd /home/ubuntu/partycashAPP
            git pull origin ${{ steps.vars.outputs.branch }}
            docker compose -f docker-compose.yml -f ${{ steps.vars.outputs.compose_file }} down
            docker compose -f docker-compose.yml -f ${{ steps.vars.outputs.compose_file }} build --no-cache
            docker compose -f docker-compose.yml -f ${{ steps.vars.outputs.compose_file }} up -d
